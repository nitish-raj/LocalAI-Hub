services:
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ollama:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - localchat
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

  open-webui:
    image: ghcr.io/open-webui/open-webui
    container_name: open-webui
    ports:
      - "3000:8080"
    volumes:
      - ollama:/root/.ollama
      - open-webui:/app/backend/data
    environment:
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://ollama:11434}
      ENABLE_RAG_WEB_SEARCH: "true"
      RAG_WEB_SEARCH_ENGINE: "searxng"
      SEARXNG_QUERY_URL: "http://searxng:8080/search?q=<query>"
      WEB_LOADER_ENGINE: playwright
      PLAYWRIGHT_WS_URL: ws://playwright:3000
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    networks:
      - localchat
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

  searxng:
    image: docker.io/searxng/searxng:latest
    container_name: searxng
    ports:
      - "8080:8080"
    volumes:
      - searxng:/etc/searxng:rw
    environment:
      - INSTANCE_NAME=searxng-instance
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
    env_file:
      - ./searxng-instance/searxng/.env
    restart: unless-stopped
    networks:
      - localchat
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

  caddy:
    image: docker.io/library/caddy:2-alpine
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - SEARXNG_HOSTNAME=${SEARXNG_HOSTNAME:-http://localhost}
      - SEARXNG_TLS=${LETSENCRYPT_EMAIL:-internal}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
    restart: unless-stopped
    networks:
      - localchat
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

  apache-tika:
    image: apache/tika:latest-full
    container_name: apache-tika
    ports:
      - "9998:9998"
    restart: always
    networks:
      - localchat
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

  pipelines:
    image: ghcr.io/open-webui/pipelines:main
    container_name: pipelines
    ports:
      - "9099:9099"
    volumes:
      - pipelines:/app/pipelines
    restart: always
    networks:
      - localchat
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

  redis:
    image: docker.io/valkey/valkey:8-alpine
    container_name: redis
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped
    networks:
      - localchat
    volumes:
      - redis-data:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

  loki:
    image: grafana/loki:3.5.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./loki-config:/etc/loki:ro
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - localchat
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.1
    container_name: cadvisor
    # Changed host port to avoid conflict with searxng
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    restart: unless-stopped
    networks:
      - localchat
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

  grafana:
    image: grafana/grafana:11.6.1
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning:ro
    restart: unless-stopped
    networks:
      - localchat
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

  prometheus:
    image: prom/prometheus:v3.3.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - localchat
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

  playwright:
    image: mcr.microsoft.com/playwright:v1.49.1-noble
    container_name: playwright
    command: npx playwright@1.49.1 run-server --port 3000 --host 0.0.0.0
    restart: unless-stopped
    networks:
      - localchat
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
    environment:
      - QDRANT__SERVICE__HSTS_ENABLED=false
      - QDRANT__SERVICE__HSTS_MAX_AGE=0
    volumes:
      - qdrant-data:/qdrant/storage
    restart: unless-stopped
    networks:
      - localchat
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL:-http://localhost:3100/loki/api/v1/push}
        labels: "service={{.Name}}"

volumes:
  ollama:
    name: ollama
  open-webui:
    external: true
    name: open-webui
  searxng:
    name: searxng
  pipelines:
    external: true
    name: pipelines
  redis-data:
    name: redis-data
  caddy-data:
    name: caddy-data
  caddy-config:
    name: caddy-config
  grafana-data:
    name: grafana-data
  prometheus-data:
    name: prometheus-data
  qdrant-data:
    name: qdrant-data
  loki-data:
    name: loki-data

networks:
  localchat:
    name: localchat
    driver: bridge
